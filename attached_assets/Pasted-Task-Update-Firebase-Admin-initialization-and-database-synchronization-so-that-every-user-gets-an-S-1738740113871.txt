Task: Update Firebase Admin initialization and database synchronization so that every user gets an SSID.

Steps:

Update Secrets:

Remove the existing secret named FIREBASE_ADMIN_PRIVATE_KEY.
Create a new secret named FIREBASE_SERVICE_ACCOUNT_JSON.
Open your Firebase Console, go to Project Settings → Service Accounts, click “Generate New Private Key”, and copy the entire JSON file contents (which includes "private_key", "client_email", "project_id", etc.). Paste that whole JSON into the new secret.
Modify Firebase Admin Initialization:

In your server code (for example, in a file you might call firebase-admin.ts), replace your current Firebase Admin initialization with the following code:

ts
Copy
import admin from 'firebase-admin';

// Retrieve the full service account JSON from the secret
const serviceAccountJson = process.env.FIREBASE_SERVICE_ACCOUNT_JSON;
if (!serviceAccountJson) {
  throw new Error("Missing Firebase Service Account JSON");
}
const serviceAccount = JSON.parse(serviceAccountJson);

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

// (Optional) Export admin if needed elsewhere
export default admin;
Synchronize Firebase Users with Your Database:

Create or update an endpoint (or add logic to your existing authentication middleware) so that when a user logs in via Firebase (whether via Google or email/password), the server:
Checks if a record for that user exists in your database.
If not, creates a new user record with a new SSID (using your existing logic or a helper like nanoid).
If a record exists, reads the assigned SSID and returns it to the user as “Your User ID”.
For example, if you’re updating your login endpoint, you might do something like:

ts
Copy
import { db } from "@db";
import { users } from "@db/schema";
import { nanoid } from "nanoid";
import { eq } from "drizzle-orm";

// Assume `firebaseUser` is the user object decoded from the Firebase token.
async function syncFirebaseUser(firebaseUser: any) {
  // Use a unique identifier from Firebase (e.g., uid or email)
  const email = firebaseUser.email;

  // Try to find an existing user record by email
  const [existingUser] = await db
    .select()
    .from(users)
    .where(eq(users.email, email))
    .limit(1);

  if (existingUser) {
    // User already exists – return its SSID
    return existingUser.ssid;
  } else {
    // Create a new user record with a generated SSID
    const newUser = await db.insert(users).values({
      username: firebaseUser.displayName || email.split("@")[0],
      email,
      password: "", // For Firebase users, you may leave password empty or use a placeholder.
      ssid: nanoid(12),
    }).returning();

    return newUser[0].ssid;
  }
}
Test Your Changes:

Restart your Replit project.
Log in using Firebase Authentication.
Confirm that your Firebase Admin SDK initializes without error and that the endpoint now returns an SSID (displayed as “Your User ID”) for both new and returning users.
Note: Be sure to verify that all required fields (especially client_email and project_id) are included in your FIREBASE_SERVICE_ACCOUNT_JSON secret.

Run these changes, and your app should properly initialize Firebase Admin and correctly synchronize the SSID for each user.